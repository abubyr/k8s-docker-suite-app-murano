Namespaces:
  =: io.murano.apps.docker
  std: io.murano

Name: DockerGrafana

Extends: DockerApplication


Properties:
  name:
    Contract: $.string().notNull()

  publish:
    Contract: $.bool().notNull()
    Default: true

  influxDB:
    Contract: $.class(DockerInfluxDB).notNull()

  grafanaUser:
    Contract: $.string().notNull()

  grafanaPassword:
    Contract: $.string().notNull()

  dbName:
    Contract: $.string().notNull()

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()
      - $._scope: switch($.publish, $ => public, not $ => internal)


  getContainer:
    Body:
      - $influxDbLink: $.getConnectionTo($.influxDB, 8086)
      - Return:
          name: $.name
          image: 'tutum/grafana'
          env:
            HTTP_USER: $.grafanaUser
            HTTP_PASS: $.grafanaPassword
            INFLUXDB_HOST: $influxDbLink.host
            INFLUXDB_PORT: $influxDbLink.port
            INFLUXDB_NAME: $.dbName
            INFLUXDB_USER: root
            INFLUXDB_PASS: root
          ports:
            - port: 80
              scope: $._scope


  onInstallationStart:
    Body:
      - $._environment.reporter.report($this, 'Installing Grafana')


  onInstallationFinish:
    Body:
      - If: $.publish
        Then:
          - $endpoints: $.applicationEndpoints.where($.scope = $this._scope).
              select(format('http://{0}:{1}', $.address, $.port))
          - $._environment.reporter.report($this, 'Grafana {0} is available at {1}'.format($.name, join(', ', $endpoints)))
        Else:
          - $._environment.reporter.report($this, 'Grafana {0} has deployed but is not accessible from outside'.format($.name))
